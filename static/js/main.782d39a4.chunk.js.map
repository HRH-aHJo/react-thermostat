{"version":3,"sources":["components/Settings/useSettings.js","components/TempDisplay/TempChart.js","components/TempDisplay/TempDisplay.js","components/ThermostatStatus/ThermostatStatus.js","components/Settings/Settings.js","App.js","serviceWorker.js","index.js"],"names":["initialState","unit","SettingsContext","createContext","reducer","state","action","type","payload","SettingsProvider","children","Provider","value","useReducer","useSettings","useContext","lineColors","useStyles","makeStyles","theme","paper","padding","spacing","display","overflow","flexDirection","margin","marginTop","TempChart","props","useTheme","settings","classes","message","error","messageColor","data","dataKeys","isLoading","Fragment","Typography","component","variant","color","gutterBottom","data-testid","className","align","settingsUnit","dateRange","map","element","converted","forEach","keyEntry","tempreture","fromUnit","toUnit","key","toFixed","top","right","bottom","left","strokeDasharray","opacity","dataKey","tickFormatter","timeStr","moment","format","angle","position","style","textAnchor","fill","palette","text","primary","content","active","label","Paper","i","circleStyle","marginRight","backgroundColor","stroke","borderRadius","width","height","cursor","dot","name","TempDisplay","chartData","chartKeys","this","setState","fetch","then","response","ok","json","date","point_data","push","id","length","graph_data","record","obj","x","actual","chartRecord","filter","crec","time","catch","err","Component","textStyle","whiteSpace","ThermostatStatus","useState","status","setStatus","useEffect","onChange","radioChangeHandler","event","currentTarget","Container","maxWidth","Grid","container","direction","justify","alignItems","item","xs","sm","Button","onClick","fontSize","minWidth","border","Settings","dispatch","Tooltip","title","size","root","toolbar","paddingRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","flexGrow","appBarSpacer","mixins","paddingTop","paddingBottom","fixedHeight","Boolean","window","location","hostname","match","ReactDOM","render","prefersDarkMode","useMediaQuery","colorMode","setColorMod","getColorMode","useCallback","mode","React","useMemo","createMuiTheme","fixedHeightPaper","clsx","ThemeProvider","CssBaseline","AppBar","Toolbar","noWrap","ToggleButton","selected","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.782d39a4.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n{/* This component is responsible for setttings management and it will use React Context API for this purpose */}\r\n\r\nconst initialState = {\r\n    unit: '°C',\r\n};\r\n\r\nexport const SettingsContext = createContext(initialState)\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'SET_UNIT':\r\n        return {\r\n            ...state,\r\n            unit: action.payload\r\n        };\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport function SettingsProvider({ children }) {\r\n  return (\r\n    <SettingsContext.Provider value={useReducer(reducer, initialState)}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  )\r\n}\r\n\r\nSettingsProvider.propTypes = { children: PropTypes.node.isRequired };\r\n\r\nexport default function useSettings() {\r\n  return useContext(SettingsContext)\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport moment from 'moment'\r\nimport { WindMillLoading } from 'react-loadingg'\r\nimport useSettings from '../Settings/useSettings'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useTheme, makeStyles } from '@material-ui/core/styles'\r\nimport { LineChart, Tooltip, Legend, Label, ResponsiveContainer, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\r\n\r\n{/* This component is responsible for rendering tempreture data */}\r\n\r\nconst lineColors = [\r\n    '#332288', '#88CCEE', '#44AA99'\r\n]\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column'\r\n    },\r\n    margin: {\r\n        marginTop: 60\r\n    }\r\n}));\r\n\r\nconst TempChart = (props) => {\r\n\r\n    const theme = useTheme();\r\n    const [settings] = useSettings();\r\n    const classes = useStyles();\r\n    const message = props.error?`Error! ${props.error}`:'Loading ...'\r\n    const messageColor = props.error?'secondary':'inherit'\r\n\r\n    if (!props.data || !props.dataKeys || props.isLoading) {\r\n        return (\r\n            <React.Fragment>\r\n                <Typography component='h2' variant='h6' color='primary' gutterBottom>\r\n                    Chart\r\n                </Typography>\r\n                <WindMillLoading />\r\n                <Typography data-testid='message' className={classes.margin} component='h6' variant='caption' color={messageColor} align='center'>\r\n                    {message}\r\n                </Typography>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const convertTempreture = (tempreture, fromUnit, toUnit) => {\r\n        if(fromUnit === '°C' && toUnit === '°F') {\r\n            return tempreture * 9 / 5 + 32;\r\n        } else if(fromUnit === '°F' && toUnit === '°C') {\r\n            return (tempreture - 32) * 5 / 9;\r\n        }\r\n    }\r\n\r\n    const convertData = (data, settingsUnit) => {\r\n        if(data && data[0]) {\r\n            if(settingsUnit === data[0].unit) {\r\n                return data;\r\n            } else {\r\n                return data.map(element => {\r\n                    let converted = [];\r\n                    props.dataKeys.forEach(keyEntry => {\r\n                        converted[keyEntry.key] = convertTempreture(element[keyEntry.key], element.unit, settingsUnit).toFixed(2);\r\n                    });\r\n                    return { ...element, ...converted };\r\n                });\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // eslint-disable-next-line react/prop-types\r\n    const CustomTooltip = ({ active, payload, label }) => {\r\n        if (active) {\r\n            return (\r\n                <Paper className={classes.paper}>\r\n                    <div>\r\n                        <p>{moment(label).format('DD MMM HH:mm')}</p>\r\n                        {\r\n                            // eslint-disable-next-line react/prop-types\r\n                            payload.map((element, i) => {\r\n                                var circleStyle = {\r\n                                    padding: 0,\r\n                                    marginRight: 5,\r\n                                    marginTop: 5,\r\n                                    display: 'inline-block',\r\n                                    backgroundColor: element.stroke,\r\n                                    borderRadius: '50%',\r\n                                    width: 12,\r\n                                    height: 12,\r\n                                };\r\n                                return (<div key={i}><span style={circleStyle} /><span style={{ display: 'inline-block', width: 40 }}>{element.value}</span> {settings.unit}</div>)\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Paper>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography component='h2' variant='h6' color='primary' gutterBottom>\r\n                Chart\r\n        </Typography>\r\n            <Typography data-testid='date-range' component='h6' variant='caption' color='inherit' align='center'>\r\n                {props.dateRange}\r\n            </Typography>\r\n            <ResponsiveContainer>\r\n                <LineChart\r\n                    data={convertData(props.data, settings.unit)}\r\n                    margin={{\r\n                        top: 16,\r\n                        right: 16,\r\n                        bottom: 0,\r\n                        left: 24,\r\n                    }}\r\n                >\r\n                    <CartesianGrid strokeDasharray='4 4' opacity='0.2' />\r\n                    <XAxis dataKey='time' tickFormatter={timeStr => moment(timeStr).format('HH:mm')} />\r\n                    <YAxis>\r\n                        <Label\r\n                            angle={270}\r\n                            position='left'\r\n                            style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n                        >\r\n                            {`Tempreture (${settings.unit})`}\r\n                        </Label>\r\n                    </YAxis>\r\n\r\n                    <Tooltip content={<CustomTooltip />} cursor={{ fill: 'rgba(206, 206, 206, 0.2)' }} />\r\n                    <Legend />\r\n                    {\r\n                        props.dataKeys.map((element, i) => {\r\n                            return (<Line key={i} dot={false} type='monotone' name={element.name} dataKey={element.key} stroke={lineColors[i]} />)\r\n                        })\r\n                    }\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nTempChart.propTypes = { \r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.array,\r\n    dataKeys: PropTypes.array,\r\n    error: PropTypes.string,\r\n    dateRange: PropTypes.string\r\n};\r\n\r\nexport default TempChart","import React, { Component } from 'react'\r\nimport TempChart from './TempChart';\r\n\r\n{/* This container component is responsible for fetching data from API (for separation of concerns) and It will render TempChart component */}\r\n\r\nconst API = 'https://raw.githubusercontent.com/ParityInc/backend-assignment/master/thermostat.json'\r\n\r\nexport default class TempDisplay extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      data: null,\r\n      isLoading: true,\r\n      dateRange : null,\r\n      chartData: null,\r\n      chartKeys: null,\r\n      error: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ error:null, isLoading: true });\r\n    fetch(API)\r\n        .then( response => {\r\n            if (!response.ok) { throw response }\r\n            return response.json()\r\n        })\r\n        .then(data => {\r\n            let chartKeys = [];\r\n            let chartData = [];\r\n            let dateRange = data.date;\r\n            data.point_data.forEach(element => {\r\n                chartKeys.push({'key': element.id, 'name': element.name});\r\n                if(chartData.length === 0) {\r\n                  chartData = element.graph_data.map(record => {\r\n                      let obj = {'time': record.x, 'unit': element.unit};\r\n                      obj[element.id] = record.actual;\r\n                      return obj;\r\n                    })\r\n                } else {\r\n                    element.graph_data.forEach(record => {\r\n                        let chartRecord = chartData.filter(crec => {\r\n                            return crec.time === record.x\r\n                        });\r\n                        if(chartRecord) {\r\n                            chartRecord[0][element.id] = record.actual;\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n            this.setState({ data, chartData, chartKeys, dateRange, isLoading: false })\r\n        })\r\n        .catch( err => {\r\n            err.text().then( error => {\r\n                return this.setState({ error, isLoading: false })\r\n            })\r\n        });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TempChart data={this.state.chartData} dataKeys={this.state.chartKeys} dateRange={this.state.dateRange} isLoading={this.state.isLoading} error={this.state.error} />\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff';\r\nimport HotTubIcon from '@material-ui/icons/HotTub';\r\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\r\nimport ToysIcon from '@material-ui/icons/Toys';\r\nimport BrightnessAutoIcon from '@material-ui/icons/BrightnessAuto';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n{/* This component is responsible for rendering ThermostatStats based on React Hooks */}\r\n\r\nconst textStyle = {\r\n    marginTop: 6,\r\n    width: '40px',\r\n    whiteSpace: 'nowrap'\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    margin: {\r\n      marginRight: 5\r\n    },\r\n}));\r\n\r\nexport default function ThermostatStatus(props) {\r\n\r\n    const [status, setStatus] = useState('off')\r\n\r\n    useEffect(() => {\r\n        if(props.onChange) props.onChange(status)\r\n    }, [props, status])\r\n\r\n    const classes = useStyles();\r\n\r\n    const radioChangeHandler = (event) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                Status\r\n            </Typography>\r\n            <Container maxWidth=\"lg\">\r\n            <Grid container spacing={3} direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n              <Grid item xs={4} sm={2}>\r\n                <Button data-testid=\"off-switch\" onClick={radioChangeHandler} value=\"off\" variant=\"contained\" color={ status === \"off\" ? \"primary\":\"default\"}>\r\n                <Grid container justify = \"center\">\r\n                    <ToggleOffIcon fontSize=\"large\" className={classes.margin}/>\r\n                    <div style={textStyle}>OFF</div>\r\n                </Grid>\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4} sm={2}>\r\n              <Button data-testid=\"cool-switch\" onClick={radioChangeHandler} value=\"cool\" variant=\"contained\" color={ status === \"cool\" ? \"primary\":\"default\"}>\r\n                <Grid container justify = \"center\">\r\n                        <AcUnitIcon fontSize=\"large\" className={classes.margin}/>\r\n                        <div style={textStyle}>COOL</div>\r\n                    </Grid>\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4} sm={2}>\r\n              <Button data-testid=\"heat-switch\" onClick={radioChangeHandler} value=\"heat\" variant=\"contained\" color={ status === \"heat\" ? \"primary\":\"default\"}>\r\n                <Grid container justify = \"center\">\r\n                        <HotTubIcon fontSize=\"large\" className={classes.margin}/>\r\n                        <div style={textStyle}>HEAT</div>\r\n                    </Grid>\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4} sm={2}>\r\n              <Button data-testid=\"fan-switch\" onClick={radioChangeHandler} value=\"fan\" variant=\"contained\" color={ status === \"fan\" ? \"primary\":\"default\"}>\r\n                <Grid container justify = \"center\">\r\n                        <ToysIcon fontSize=\"large\" className={classes.margin}/>\r\n                        <div style={textStyle}>FAN</div>\r\n                    </Grid>\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={4} sm={2}>\r\n              <Button data-testid=\"auto-switch\" onClick={radioChangeHandler} value=\"auto\" variant=\"contained\" color={ status === \"auto\" ? \"primary\":\"default\"}>\r\n                <Grid container justify = \"center\">\r\n                        <BrightnessAutoIcon fontSize=\"large\" className={classes.margin}/>\r\n                        <div style={textStyle}>AUTO</div>\r\n                    </Grid>\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport useSettings from './useSettings'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    margin: {\r\n      marginRight: 5,\r\n      height: 48,\r\n      minWidth: 50,\r\n      border: '1px solid rgba(255, 255, 255, 0.12)'\r\n    },\r\n}));\r\n\r\n{/* This component is responsible for unit setting and it will use \"useSetting\" hook to update the settings context */}\r\n\r\nconst Settings = () => {\r\n\r\n    const [state, dispatch] = useSettings();\r\n    const classes = useStyles();\r\n\r\n    const unitChangeHandler = () => {\r\n        dispatch({type: 'SET_UNIT', payload: state.unit==='°C'?'°F':'°C'})\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Tooltip title='Toggle unit'>\r\n                <Button size='small'\r\n                        data-testid='unit-button'\r\n                        className={classes.margin}\r\n                        color='inherit'\r\n                        onClick={unitChangeHandler}\r\n                    >\r\n                    <div data-testid='unit-text'>{ state.unit==='°C'?'°F':'°C' }</div>\r\n                </Button>\r\n            </Tooltip>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, { useState, useCallback } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EcoIcon from '@material-ui/icons/Eco';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport TempDisplay from './components/TempDisplay/TempDisplay';\nimport ThermostatStatus from './components/ThermostatStatus/ThermostatStatus';\nimport Settings from './components/Settings/Settings'\nimport { SettingsProvider } from './components/Settings/useSettings'\n\n{/* This component is responsible for rendering Application, Appbar and other compoentns\n    It will also provide theme and settings for other components using Context API */}\n\n{/* This application is using material-ui for display elements */}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  toolbar: {\n    paddingRight: 0\n  },\n  appBar: {\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  title: {\n    flexGrow: 1\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto'\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column'\n  },\n  fixedHeight: {\n    height: 320\n  }\n}));\n\nexport default function App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const [colorMode, setColorMod] = useState(false)\n\n  const getColorMode = useCallback(() => {\n    let mode = colorMode;\n    if(!mode) {\n      mode = prefersDarkMode ? 'dark' : 'light'\n    }\n    return mode;\n  }, [colorMode, prefersDarkMode])\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: getColorMode(),\n        },\n      }),\n    [getColorMode],\n  );\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <SettingsProvider>\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar position='absolute' color='primary'>\n          <Toolbar>\n            <Typography\n              component='h1'\n              variant='h6'\n              noWrap\n              className={classes.title}\n            >\n              Dashboard\n            </Typography>\n            <Typography\n              component='h1'\n              variant='h6'\n              noWrap\n              className={classes.title}\n            >\n              Eco Thermostat\n              <EcoIcon />\n            </Typography>\n            <Settings />\n            <Tooltip title='Toggle light/dark theme'>\n              <ToggleButton\n                  value='check'\n                  selected={getColorMode()==='dark'?true:false}\n                  onChange={() => {\n                    setColorMod(getColorMode()==='dark'?'light':'dark');\n                  }}\n                >\n                <Brightness4Icon />\n              </ToggleButton>\n            </Tooltip>\n          </Toolbar>\n        </AppBar>\n        <main className={classes.content}>\n          <div className={classes.appBarSpacer} />\n          <Container maxWidth='lg' className={classes.container}>\n            <Grid container spacing={3}>\n              {/* Thermostat Status */}\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  <ThermostatStatus />\n                </Paper>\n              </Grid>\n              {/* Tempreture Chart */}\n              <Grid item xs={12}>\n                <Paper className={fixedHeightPaper}>\n                  <TempDisplay />\n                </Paper>\n              </Grid>\n            </Grid>\n          </Container>\n        </main>\n      </div>\n      </SettingsProvider>\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}